<Baseline Height="@svgHeight" StartTime="@(timeRange.StartTime)" EndTime="@(timeRange.EndTime)">
    <DataTemplate>
        @foreach (var bar in TimeBars)
        {
            <g class="@(bar.CssClass)">
                <rect x="@(bar.Left)"
                      y="@(bar.Top)"
                      width="@(bar.Width)"
                      height="@(bar.Height)">
                    <title>@(bar.Tooltip)</title>
                </rect>
            </g>
            @if (!string.IsNullOrEmpty(bar.Label))
            {
                <g class="bar">
                    <text x="@(bar.LabelX)"
                          y="@(bar.LabelY)">
                        @(bar.Label)
                    </text>
                </g>
            }
        }
    </DataTemplate>
</Baseline>

@inject IScopeManager ScopeManager;

@code {

    /// <summary>
    /// Current date and time
    /// </summary>
    [Parameter]
    public DateTime CurrentDateTime
    {
        get => currentDateTime;
        set => currentDateTime = value;
    }

    /// <summary>
    /// Start time of the scale (default 8.0 => 8:00 AM)
    /// </summary>
    [Parameter]
    public double? StartTime { get; set; }
    /// <summary>
    /// End time of the scale (default 20.0 => 8:00 PM)
    /// </summary>
    [Parameter]
    public double? EndTime { get; set; }
    /// <summary>
    /// If true, StartTime and EndTime will automatically adjust based on the data to display all the items
    /// </summary>
    [Parameter]
    public bool IsTimeRangeFlexible { get; set; }
    /// <summary>
    /// Data
    /// </summary>
    [Parameter]
    public IEnumerable<Line> Data { get; set; }

    public struct Item
    {
        public string Title;

        public DateTime StartTime { get; set; }
        public TimeSpan ElapsedTime { get; set; }

        public DateTime EndTime => StartTime + ElapsedTime;
    }

    public struct Line
    {
        public string Title;
        public string Descritpion;
        public string CssClass;

        public IEnumerable<Item> Items;

        public Object ItemObject;

    }

}
