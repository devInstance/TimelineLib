@page "/timeline"

<p>
    Timeline components requires only one parameter <code>Data</code> to function.
    <a class="btn btn-primary" data-toggle="collapse" href="#collapseExample" role="button" aria-expanded="false" aria-controls="collapseExample">
        See example
    </a>
</p>
<div class="collapse" id="collapseExample">
    <div class="card card-body">
        Example:
        <code>
            @("<DevInstance.TimelineLib.Timeline Data=\"Lines\"></DevInstance.TimelineLib.Timeline>");
        </code>
        <pre>
        <code>
protected async override Task OnInitializedAsync()
{
    var now = new DateTime(2021, 1, 12, 0, 0, 0);

    Lines = new TimelineLib.Timeline.Line[] {
        new TimelineLib.Timeline.Line
        {
            Title = "test" ,
            CssClass = "orange",
            Items = new TimelineLib.Timeline.Item[]
            {
                new TimelineLib.Timeline.Item { StartTime = now, ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(2), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(4), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(8), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(12), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(20), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(23), ElapsedTime = new TimeSpan(0, 30, 0)},
            }
        },
        new TimelineLib.Timeline.Line
        {
            Title = "test 2" ,
            CssClass = "blue",
            Items = new TimelineLib.Timeline.Item[]
            {
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(3), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(11), ElapsedTime = new TimeSpan(0, 30, 0)},
                new TimelineLib.Timeline.Item { StartTime = now.AddHours(16.25), ElapsedTime = new TimeSpan(0, 30, 0)}
            }
        }
    }
}
        </code>
    </pre>
    </div>
</div>

<h2>Default behaviour</h2>

<p>
    <DevInstance.Timelines.Chart>
        <Lines>
            <DevInstance.Timelines.Timeline Data="Lines">
            </DevInstance.Timelines.Timeline>
        </Lines>
    </DevInstance.Timelines.Chart>
</p>

<h2>Flexible timescale</h2>
<DevInstance.Timelines.Chart IsTimeRangeFlexible="true">
    <Lines>
        <DevInstance.Timelines.Timeline Data="Lines">
        </DevInstance.Timelines.Timeline>
    </Lines>
</DevInstance.Timelines.Chart>

<h2>Custom timescale</h2>
<p>
    Start: @startTime
    End: @endTime
</p>
<button class="btn btn-outline-primary" @onclick="@(() => { startTime--; StateHasChanged(); })">- Start</button>
<button class="btn btn-outline-primary" @onclick="@(() => { startTime++; StateHasChanged(); })">+ Start</button>
<button class="btn btn-outline-primary" @onclick="@(() => { endTime--; StateHasChanged(); })">- End</button>
<button class="btn btn-outline-primary" @onclick="@(() => { endTime++; StateHasChanged(); })">+ End</button>
<button class="btn btn-outline-primary" @onclick="@(() => { CustomLines.Add(NewLine) ; StateHasChanged(); })">Add Line</button>
<DevInstance.Timelines.Chart StartTime="startTime" EndTime="endTime" ShowLineLabels="true">
    <Lines>
        <DevInstance.Timelines.Timeline Data="CustomLines">
        </DevInstance.Timelines.Timeline>
    </Lines>
</DevInstance.Timelines.Chart>

<h2>Dynamic timescale</h2>

<div class="form-group form-check">
    <input type="checkbox" class="form-check-input" id="isTimeRangeFlexible" placeholder="Start this task" aria-label="Start this task" @bind="isTimeRangeFlexible"
           />
    <label class="form-check-label" for="isTimeRangeFlexible">IsTimeRangeFlexible</label>
</div>

<DevInstance.Timelines.Chart IsTimeRangeFlexible="isTimeRangeFlexible">
    <Lines>
        <DevInstance.Timelines.Timeline Data="DynamicLines">
        </DevInstance.Timelines.Timeline>
    </Lines>
</DevInstance.Timelines.Chart>

<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addItemModal" title="New tag">
    New Tag
</button>
<div class="modal fade" id="addItemModal" tabindex="-1" aria-labelledby="addItemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addItemModalLabel">Add Task</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Timer's name" aria-label="Timer's name" @bind="startTimeLabel" />
                    <input type="text" class="form-control" placeholder="Timer's name" aria-label="Timer's name" @bind="endTimeLabel" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="OnAddItem">Add</button>
            </div>
        </div>
    </div>
</div>
@code{
    public double startTime = 5.0;
    public double endTime = 14.0;

    string startTimeLabel;
    string endTimeLabel;

    bool isTimeRangeFlexible = true;
}
