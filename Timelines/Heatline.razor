@foreach (var gline in GuidingLines)
{
    <g class="guide-line">
        <line x1="@(gline.Left)" y1="@(gline.Horizontal)" x2="@(gline.Right)" y2="@(gline.Horizontal)" />
    </g>
}

@for (int i = 0; i < HeatItems.Length; i++)
{
    var item = HeatItems[i];
<g class="@(item.CssClass)" >
    @*//TODO: Introduce radius parameter*@
    <circle cx="@(item.X)" cy="@(item.Y)" r="10" class="@(item.CssClass)" style="opacity:@item.Value;">
        <title>@(item.Tooltip)</title>
    </circle>
</g>
}

@inject IScopeManager ScopeManager;

@code {

    [CascadingParameter(Name = "Parent")]
    ITimelineChart Parent { get; set; }

    /// <summary>
    /// Data
    /// </summary>
    [Parameter]
    public IEnumerable<Line> Data { get; set; }
    /// <summary>
    /// Time interval between values in hours
    /// </summary>
    [Parameter]
    public double TimeInterval { get; set; }

    public struct Item
    {
        public float Value;
        public string Description;
        public DateTime Time { get; set; }
    }

    public struct Line
    {
        public string Title;
        public string Descritpion;
        public string CssClass;

        public IEnumerable<Item> Items;

        public Object ItemObject;

    }

}
