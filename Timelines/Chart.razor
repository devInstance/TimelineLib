<div>
    @if (ShowLineLabels && LineLabels != null)
    {
        <div class="left-container">
            <div class="vertical-label" style="width: 100%;margin-top:1em;"></div>
            @foreach (var label in LineLabels)
            {
                <div class="vertical-label" style="width: 100%;position: relative;@(label.DivStyle)"><small>@(label.LabelText)</small></div>
            }
        </div>
    }
    <div class="@(ShowLineLabels ? "right-container" :"full-container")">
        @if (ShowTimeLabel && TimeScaleLabel != null)
        {
            @foreach (var item in TimeScaleLabel)
            {
                <div class="@(item.CssClass)" style="@(item.DivStyle)"><small>@(item.LabelText)</small></div>
            }
        }
        <div>
            <svg class="@CssContainerClass" width="100%" style="z-index:-1;" height="@(Height)" role="img">
                @if (TimeScale != null)
                {
                    @foreach (var item in TimeScale)
                    {
                        <line x1="@(item.HourLineX)" y1="0" x2="@(item.HourLineX)" y2="@(item.HourLineY)" stroke="grey"></line>
                        <line x1="@(item.HalfLineX)" y1="0" x2="@(item.HalfLineX)" y2="@(item.HalfLineY)" stroke="grey"></line>
                    }
                }
                <CascadingValue Value="this" Name="Parent">
                    @Lines
                </CascadingValue>
            </svg>
        </div>

    </div>
</div>
@inject IScopeManager ScopeManager;

@code {

    /// <summary>
    /// Start time of the scale (default 8.0 => 8:00 AM)
    /// </summary>
    [Parameter]
    public double? StartTime { get; set; }
    /// <summary>
    /// End time of the scale (default 20.0 => 8:00 PM)
    /// </summary>
    [Parameter]
    public double? EndTime { get; set; }
    /// <summary>
    /// If true, StartTime and EndTime will automatically adjust based on the data to display all the items
    /// </summary>
    [Parameter]
    public bool IsTimeRangeFlexible { get; set; }

    /// <summary>
    /// Current date and time
    /// </summary>
    [Parameter]
    public DateTime CurrentDateTime
    {
        get => currentDateTime;
        set => currentDateTime = value;
    }

    [Parameter]
    public RenderFragment Lines { get; set; }
    [Parameter]
    public string CssClass { get; set; }
    [Parameter]
    public string Width { get; set; }
    [Parameter]
    public string Height { get; set; }
    [Parameter]
    public bool ShowTimeLabel { get; set; } = true;
    [Parameter]
    public bool ShowLineLabels { get; set; } = false;

}
